// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: greeter.proto

package pb

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	client "github.com/asim/go-micro/v3/client"

	server "github.com/asim/go-micro/v3/server"

	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Greeter service

type GreeterClient interface {
	Greeting(ctx context.Context, in *GreetingRequest, opts ...client.CallOption) (*GreetingResponse, error)
}

type greeterClient struct {
	c           client.Client
	serviceName string
}

func NewGreeterClient(serviceName string, c client.Client) GreeterClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "pb"
	}
	return &greeterClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *greeterClient) Greeting(ctx context.Context, in *GreetingRequest, opts ...client.CallOption) (*GreetingResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Greeter.Greeting", in)
	out := new(GreetingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterHandler interface {
	Greeting(context.Context, *GreetingRequest, *GreetingResponse) error
}

func RegisterGreeterHandler(s server.Server, hdlr GreeterHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Greeter{hdlr}, opts...))
}

type Greeter struct {
	GreeterHandler
}

func (h *Greeter) Greeting(ctx context.Context, in *GreetingRequest, out *GreetingResponse) error {
	return h.GreeterHandler.Greeting(ctx, in, out)
}
